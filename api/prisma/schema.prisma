generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  password     String
  role         Role      @default(USER)
  avatar       String    @default("default-avatar.png")
  posts        Post[]
  comments     Comment[]
  bookmarks    Bookmark[]
  likes        Like[]
  dislikes     Dislike[]
  following    User[]    @relation("Follows", fields: [followingIds], references: [id])
  followingIds String[]  @db.ObjectId
  followers    User[]    @relation("Follows", fields: [followerIds], references: [id])
  followerIds  String[]  @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Post {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  content      String
  image        String?
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String    @db.ObjectId
  category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   String    @db.ObjectId
  comments     Comment[]
  likes        Like[]
  dislikes     Dislike[]
  bookmarks    Bookmark[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Comment {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  post         Post      @relation(fields: [postId], references: [id])
  postId       String    @db.ObjectId
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String    @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Category {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String       @unique
  description  String?
  parent       Category?    @relation("Subcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId     String?      @db.ObjectId
  subcategories Category[] @relation("Subcategories")
  posts        Post[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Bookmark {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @db.ObjectId
  post         Post      @relation(fields: [postId], references: [id])
  postId       String    @db.ObjectId
  createdAt    DateTime  @default(now())

  @@unique([userId, postId])
}

model Like {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @db.ObjectId
  post         Post      @relation(fields: [postId], references: [id])
  postId       String    @db.ObjectId
  createdAt    DateTime  @default(now())

  @@unique([userId, postId])
}

model Dislike {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @db.ObjectId
  post         Post      @relation(fields: [postId], references: [id])
  postId       String    @db.ObjectId
  createdAt    DateTime  @default(now())

  @@unique([userId, postId])
}

model NewsletterSubscription {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  createdAt    DateTime  @default(now())
}

enum Role {
  USER
  AUTHOR
  ADMIN
}
